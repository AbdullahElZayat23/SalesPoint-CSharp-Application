<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        k80F0lBV3tEAAAAASUVORK5CYII=
</value>
  </data>
</root>